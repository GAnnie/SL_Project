//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;

/// <summary>
/// Generates a safe wrapper for TradeCenterItemCellPrefab.
/// </summary>
using System;
using com.nucleus.h1.logic.whole.modules.trade.dto;
using com.nucleus.player.data;


public class TradeCenterItemCellPrefab : BaseView
{
	public UILabel NameLabel_UILabel;
	public UILabel PriceLabel_UILabel;
	public UILabel TrendLabel_UILabel;
	public UIButton TradeCenterItemCellPrefab_UIButton;
	public UISprite SelectSprite_UISprite;

	public void Setup (Transform root)
	{
		NameLabel_UILabel = root.Find("NameLabel").GetComponent<UILabel>();
		PriceLabel_UILabel = root.Find("PriceLabel").GetComponent<UILabel>();
		TrendLabel_UILabel = root.Find("TrendLabel").GetComponent<UILabel>();
		TradeCenterItemCellPrefab_UIButton = root.GetComponent<UIButton>();
		SelectSprite_UISprite = root.Find("SelectSprite").GetComponent<UISprite>();
	}

	private TradeGoodsDto _goods;
	public event Action<TradeCenterItemCellPrefab> _OnCellSelect;
	
	public void SetData(TradeGoodsDto goods, Action<TradeCenterItemCellPrefab> OnCellSelect)
	{
		_goods = goods;
		_OnCellSelect = OnCellSelect;
		
		Setup (this.transform);

		Select (false);
		
		GeneralItem item = DataCache.getDtoByCls<GeneralItem>(goods.id);

		if (item != null)
		{
			NameLabel_UILabel.text = item.name;
		}
		
		Update();
		
		EventDelegate.Set (TradeCenterItemCellPrefab_UIButton.onClick, OnClickCell);
	}
	
	private void OnClickCell()
	{
		if (_OnCellSelect != null)
		{
			_OnCellSelect(this);
		}
	}
	
	public TradeGoodsDto GetGoods()
	{
		return _goods;
	}
	
	public void Select(bool select)
	{
		SelectSprite_UISprite.gameObject.SetActive (select);
	}
	
	public void Update()
	{
		int priceInt = Mathf.FloorToInt (_goods.price);
		int originalPriceInt = Mathf.FloorToInt (_goods.originalPrice);

		PriceLabel_UILabel.text = priceInt.ToString();

		float rise = 0f;

		if (Math.Abs(priceInt-originalPriceInt) > 0)
		{
			rise = ( (float)priceInt  - (float)originalPriceInt ) / (float)originalPriceInt * 100f;
		}

		string str = "";
		Color color = Color.white;

		if (rise >= 0.01f) 
		{
			str = "+" + rise.ToString ("F2") + "%";
			color = ColorExt.HexToColor("ee5d5d");
		} 
		else if (rise <= -0.01f) 
		{
			str = rise.ToString ("F2") + "%";
			color = ColorExt.HexToColor("2beb54");
		}
		else
		{
			str = "--";
			color = Color.white;
		}

		TrendLabel_UILabel.text = StringHelper.WrapColor(str, color);;
	}
}
