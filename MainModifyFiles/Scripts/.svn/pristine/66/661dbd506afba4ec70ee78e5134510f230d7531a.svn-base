using UnityEngine;
using System.Collections;
using com.nucleus.h1.logic.services;
using com.nucleus.commons.message;
using System;
using com.nucleus.h1.logic.core.modules.charactor.data;
using System.Collections.Generic;
using com.nucleus.h1.logic.core.modules.faction.data;
using com.nucleus.h1.logic.login.modules.dto;

public class RoleCreateController : MonoBehaviour,IViewController
{
	private RoleCreateView _view;

	/// <summary>
	/// 从DataModel中取得相关数据对界面进行初始化
	/// </summary>
	public void InitView()
	{
		_view = gameObject.GetMissingComponent<RoleCreateView> ();
		_view.Setup (this.transform);

		_modelDisplayController = ModelDisplayController.GenerateUICom(_view.RoleShowGroup_Transform);
		_modelDisplayController.Init(300,300);

		RegisterEvent ();
	}
	
	/// <summary>
	/// Registers the event.
	/// DateModel中的监听和界面控件的事件绑定,这个方法将在InitView中调用
	/// </summary>
	public void RegisterEvent()
	{
		EventDelegate.Set (_view.StartGameButton.onClick, OnStartGameButtonClick);
		EventDelegate.Set (_view.CloseButton_UIButton.onClick, OnCloseButtonClick);
		EventDelegate.Set (_view.LeftButton_UIButton.onClick, OnLeftButtonClick);
		EventDelegate.Set (_view.RightButton_UIButton.onClick, OnRightButtonClick);
		EventDelegate.Set (_view.RollNameButton_UIButton.onClick, OnRollNameButtonClick);
	}

	/// <summary>
	/// 关闭界面时清空操作放在这
	/// </summary>
	public void Dispose()
	{
	}

	private ModelDisplayController _modelDisplayController;

	private ServerInfo _serverInfo;
	private Action<GeneralResponse> _onCreatePlayerSuccess;

	private List<MainCharactor> _roleList;
	private int _roleSelectIndex = 0;

	private int _currentGender = 0;

	private Dictionary<int, int> _weaponDic = null;

	public void SetData(ServerInfo info, Action<GeneralResponse> onCreatePlayerSuccess)
	{
		_serverInfo = info;
		_onCreatePlayerSuccess = onCreatePlayerSuccess;

		_weaponDic = new Dictionary<int, int>();
		_weaponDic.Add(1, 14);
		_weaponDic.Add(2, 22);

		_roleList = new List<MainCharactor> ();
		List<GeneralCharactor> list = DataCache.getArrayByCls<GeneralCharactor>();
		for (int i=0,len=list.Count; i<len; i++)
		{
			GeneralCharactor charactor = list[i];
			if (charactor is MainCharactor)
			{
				_roleList.Add(charactor as MainCharactor);
				_view.PageGroup_UIPageGroup.AddPage();
			}
		}
		_view.PageGroup_UIPageGroup.RefreshLayout();

		_view.ServerNameLabel_UILabel.text = _serverInfo.name;

		_roleSelectIndex = UnityEngine.Random.Range(0,_roleList.Count);

		SelectMainCharactor(_roleSelectIndex);

		OnRollNameButtonClick();
	}

	private void SelectMainCharactor(int index)
	{
		_view.PageGroup_UIPageGroup.SetCurrentPage(index);

		MainCharactor charactor = _roleList[index];
		_currentGender = charactor.gender;

		string pic = string.Format(PathHelper.IMAGES_PATH + "RoleCreate/roll_pic_{0}", charactor.id);
		string tip = string.Format(PathHelper.IMAGES_PATH + "RoleCreate/roll_tip_{0}", charactor.id);

		_view.RoleTexture_UITexture.mainTexture = ResourceLoader.Load( pic, "png" ) as  Texture2D;
		_view.InfoTexture_UITexture.mainTexture = ResourceLoader.Load( tip, "png" ) as  Texture2D;

		_selectFactionButton = null;
		_selectFaction = null;

		_selectFaction = null;
		_selectCharactor = charactor;
		_view.FactionGrid_UIGrid.gameObject.RemoveChildren ();
		foreach(int id in _selectCharactor.factionIds)
		{
			Faction faction = DataCache.getDtoByCls<Faction>(id);
			AddFactionButton(faction);
		}
		_view.FactionGrid_UIGrid.enabled = true;
		_view.FactionGrid_UIGrid.Reposition();

		_modelDisplayController.SetupModel(charactor, GetRoleWeaponModelId(charactor.id));
	}

	private int GetRoleWeaponModelId(int roleId)
	{
		int weaponId = 0;
		_weaponDic.TryGetValue(roleId, out weaponId);
		return weaponId;
	}

	private MainCharactor _selectCharactor;

	private Faction _selectFaction;
	private FactionCell _selectFactionButton;

	private const string NAME_FACTIONCELL = "Prefabs/Module/RoleCreateModule/FactionCell";

	private void AddFactionButton(Faction faction)
	{
		GameObject go = NGUITools.AddChild(_view.FactionGrid_UIGrid.gameObject, (GameObject)ResourcePoolManager.Instance.SpawnUIPrefab(NAME_FACTIONCELL));
		FactionCell cell = go.AddMissingComponent<FactionCell>();
		cell.Setup(go.transform);
		cell.FactionNameLabel_UILabel.text = faction.name;
		cell.FactionDescLabel_UILabel.text = faction.description;
		cell.FactionSelectSprite.SetActive(false);
		cell.FactionDescSprite.SetActive(false);

		EventDelegate.Set (cell.FactionIconSprite_UIButton.onClick, delegate() {
			SelectFaction(cell, faction);
		});
	}

	private void SelectFaction(FactionCell cell, Faction faction)
	{
		if (_selectFactionButton != null)
		{
			_selectFactionButton.FactionSelectSprite.SetActive(false);
			_selectFactionButton.FactionDescSprite.SetActive(false);
		}
		_selectFaction = faction;
		_selectFactionButton = cell;
		_selectFactionButton.FactionSelectSprite.SetActive(true);
		_selectFactionButton.FactionDescSprite.SetActive(true);
	}
	
	private void OnCloseButtonClick()
	{
		ProxyRoleCreateModule.Close();
		ProxyLoginModule.Show();
		ExitGameScript.Instance.HanderRelogin();
	}

	private void OnLeftButtonClick()
	{
		_roleSelectIndex--;
		if (_roleSelectIndex < 0)
		{
			_roleSelectIndex = _roleList.Count-1;
		}
		SelectMainCharactor(_roleSelectIndex);
	}

	private void OnRightButtonClick()
	{
		_roleSelectIndex++;
		if (_roleSelectIndex >= _roleList.Count)
		{
			_roleSelectIndex = 0;
		}
		SelectMainCharactor(_roleSelectIndex);
	}

	private void OnRollNameButtonClick()
	{
		ServiceRequestAction.requestServer(PlayerLoginService.random(1),"", delegate(GeneralResponse e) {
			PlayerNickNameDto nameDto = e as PlayerNickNameDto;
			_view.RoleNameInput_UIInput.value = nameDto.nickname;
		});
	}

	private void OnStartGameButtonClick()
	{
		if (_selectCharactor == null)
		{
			return;
		}

		if (_selectFaction == null)
		{
			TipManager.AddTip("请选择门派");
			return;
		}

		if (string.IsNullOrEmpty(_view.RoleNameInput_UIInput.value))
		{
			TipManager.AddTip("昵称不能为空");
			return;
		}

		int charactorId = _selectCharactor.id;
		int factionId = _selectFaction.id;

		string token = ServerManager.Instance.loginAccountDto.token;
		ServiceRequestAction.requestServer(PlayerLoginService.create(token, HaApplicationContext.getConfiguration().getLocalIp(), _view.RoleNameInput_UIInput.value, charactorId, factionId, _serverInfo.serviceId), "创建角色中",
		                                   CreatePlayerSuccess, CreatePlayerFail);
	}

	private void CreatePlayerSuccess(GeneralResponse e)
	{
		ProxyLoginModule.Show();

		if (_onCreatePlayerSuccess != null)
		{
			_onCreatePlayerSuccess(e);
			_onCreatePlayerSuccess = null;
		}

		ProxyRoleCreateModule.Close ();
	}
	
	private void CreatePlayerFail(ErrorResponse e)
	{
		TipManager.AddTip (e.message);
	}
}

